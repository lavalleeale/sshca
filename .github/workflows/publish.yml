name: Publish

on:
  push:
    tags:
      - "v*"

jobs:
  lintweb:
    name: "Lint Web"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: "web/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('web/yarn.lock') }}
      - name: Install modules
        run: yarn --frozen-lockfile
      - name: Prettify code 
        run: |
        npm install --global prettier
        prettier --check ./web/src/**
  web:
    name: "Build Web"
    needs: lintweb
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: |
            "web/node_modules"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('web/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Build Web
        env:
          NODE_ENV: development
        run: yarn build
  serverlint:
    name: "Lint Server"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - name: Prettify code 
        run: |
        npm install --global prettier
        prettier --check ./server/src/**
  server:
    name: "Build Server"
    needs: serverlint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: |
            "server/node_modules"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('server/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Build Server
        env:
          NODE_ENV: production
        run: yarn build
  clientlint:
    name: "Lint Client"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: sshca-client
  client:
    name: "Build Client"
    needs: clientlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v .
        working-directory: ./sshca-client
      - uses: actions/upload-artifact@v2
        with:
          name: client
          path: ./sshca-client/sshca-client
  tests:
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3, 4]
    defaults:
      run:
        working-directory: ./server
    needs:
      - server
      - web
    name: "Run Tests With Cypress"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: |
            "web/node_modules"
            "~/.cache/Cypress"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('web/yarn.lock') }}
      - uses: actions/cache@v2
        name: Cache Server Node Modules
        with:
          path: "server/node_modules"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('server/yarn.lock') }}
      - name: Install Dependencies
        run: |
          yarn --cwd ../web --frozen-lockfile
          yarn --cwd ../server --frozen-lockfile
      - name: Build Server
        env:
          DATABASE_URL: file:./dev.db
          NODE_ENV: development
        run: |
          rm -rf prisma/migrations
          sed -i -e 's/postgres/sqlite/' prisma/schema.prisma
          yarn run prisma migrate dev --name ""
          yarn build
      - name: Start Server
        env:
          DATABASE_URL: file:./dev.db
          NODE_ENV: development
          DOMAIN: localhost
          JWT_PRIVATE: |
            -----BEGIN RSA PRIVATE KEY-----
            MIICXAIBAAKBgQCvpnrazDsPg816ILJsUwOAsR/YDvBOhIHaTGwKxME29wnGKv+D
            IDfQpmFJZjK/v2jCWbr6/ZpyPGbKn8EZ6FjABnVNeUWjECAcDyzzhwRXOd6SQvKL
            GenMzEskQE0EA+hG31kmJrp/Qawf1QDR1ksdxSTX4xugSM0cwzzeC+3LxwIDAQAB
            AoGADhph1tt7Cn3cq6ega84mg9i049YfOU6uVma4bgzqLo2bPUwKg+68TIZvXUNV
            Y8vsj15BAxIFqpJq9m3pRTlAlthgbEcVwQKccTQNkPbE1cxrneQeO7KuRHfjcP4b
            NfoZmog5CtOWiep8bbqp1vU/of4c0E4mPG8RSeTr4qG+PfECQQDVIPAugEBRSZIe
            2wEjA3B0hUdHOM4E1KtpWGJsYEasrrLLEy89R8BUuUWM/8GWjlzdiIIwi4NN3dT3
            rBmrhurrAkEA0vuX/R97cTfZaO+4YfhPsrIEQhGDb3orsWCqNKHpKO4KsrNgpdrI
            /rzv7SVHK9vtSVv/ifZAVaIS2l20ob7zlQJBAI73S2ZGDd75VRVxn2+XTQY8qTWz
            ey9uYZWG/m7onkAT6EelFNksmm264lbU8U1HLjBE8+AQlgHTvpptTcLr/AUCQE9y
            Gctg3XTGmQFgs0eA31HkoqHWQm3pzSYfxjfHeCrHaBPeY9hQSDtUHexoiyJC0Fk9
            YT4sEhGs0/iSLIBzjPkCQFeqMJi2JjsUxtZwWi4utHVDr/7UbIeLQlN5HqPdK4KM
            v2baez1xCVMzSIYjgcEjtTzkQtKZ8nJZpRHGCWTiWdw=
            -----END RSA PRIVATE KEY-----
          JWT_PUBLIC: |
            -----BEGIN PUBLIC KEY-----
            MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCvpnrazDsPg816ILJsUwOAsR/Y
            DvBOhIHaTGwKxME29wnGKv+DIDfQpmFJZjK/v2jCWbr6/ZpyPGbKn8EZ6FjABnVN
            eUWjECAcDyzzhwRXOd6SQvKLGenMzEskQE0EA+hG31kmJrp/Qawf1QDR1ksdxSTX
            4xugSM0cwzzeC+3LxwIDAQAB
            -----END PUBLIC KEY-----
          SSH_KEY: |
            -----BEGIN OPENSSH PRIVATE KEY-----
            b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAlwAAAAdzc2gtcn
            NhAAAAAwEAAQAAAIEApAidP6scNZJZqD2bS4AgJOYiVO/f90tGnz72wFeVUSABHUV/u8II
            ju53rj2evLAqY4tgihkN/es0rk5OocWQ/1ShW/IBEtQzJ6zF71JYfqG94G3TLbV8FjJ+Nv
            ZznrwBOGcVdMS8uQw0RUx3YnQVUPFdjb54bR2kqzsYKs/cF/kAAAIYHVf3hh1X94YAAAAH
            c3NoLXJzYQAAAIEApAidP6scNZJZqD2bS4AgJOYiVO/f90tGnz72wFeVUSABHUV/u8IIju
            53rj2evLAqY4tgihkN/es0rk5OocWQ/1ShW/IBEtQzJ6zF71JYfqG94G3TLbV8FjJ+NvZz
            nrwBOGcVdMS8uQw0RUx3YnQVUPFdjb54bR2kqzsYKs/cF/kAAAADAQABAAAAgEJ1GwCIms
            05lgmLrDdSmbNZad9vsBXI8bvjDqWu1lgf11O8rJutaTo/c02suXtJBGOAPIS20exmNtnH
            8COqn6us2Tqasx+I1D5VEQ1eGLAo64jo1hJVoOd5UR6DSG+sNmys88C5EJ3TItmOkhQ6SI
            O306abTbKHPtm2EX7cduthAAAAQGcrRy5Poh5Tz54RviYojnDUDyr+nquNHGFFWySOJkrv
            xuk91yyOkc9kdJmzlhkrBzKHzUkpHk5wgVacX7+l+aAAAABBAM32i2NHqoNBBc71KHJfrv
            uLoREVVzIWcE+IbHed2eP2Zgtww7OCU/coAxGimGGxQgznMtzXK3Z7l8MrXufV4J8AAABB
            AMviWtEUUv1gNQ9DSz20pL+dNiQ2v/SEmxEUQnhJ+lQWnUJDS/p2Gv/oRSWpfdLdow8fSd
            ho5OSfAErZY5EeSGcAAAAcYWxleEBBbGV4cy1NYWNCb29rLUFpci5sb2NhbAECAwQFBgc=
            -----END OPENSSH PRIVATE KEY-----
        run: yarn start &
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
          parallel: true
          group: "Github Actions"
          install: false
          start: yarn start
          working-directory: web
          wait-on: "http://localhost:3000, http://localhost:3000/api/graphql"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publishserver:
    name: "Publish Server"
    needs:
      - tests
      - client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./server
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/sshca/sshca-server:latest
  publishclientartifacts:
    needs:
      - tests
      - client
    name: Publish Client Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [
            { "os": "darwin", "arch": "amd64" },
            { "os": "darwin", "arch": "arm64" },
            { "os": "linux", "arch": "amd64" },
            { "os": "linux", "arch": "386" },
            { "os": "windows", "arch": "amd64" },
            { "os": "windows", "arch": "386" },
          ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"

      - name: Create Artifact
        run: |
          cd sshca-client
          GOOS=${{ matrix.target.os }} GOARCH=${{ matrix.target.arch }} go build -o sshca_client
          zip -j -r sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip sshca_client
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}
          path: ./sshca-client/sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
  # Create the release for the tag
  publishclientrelease:
    runs-on: ubuntu-latest
    name: Publish Client Release
    needs: publishclientartifacts
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  # Add all the builds as assets to the release
  publishclientartifactsrelease:
    runs-on: ubuntu-latest
    name: Add Client Artifacts to Release
    needs: [publishclientartifacts, publishclientrelease]
    strategy:
      matrix:
        target:
          [
            { "os": "darwin", "arch": "amd64" },
            { "os": "darwin", "arch": "arm64" },
            { "os": "linux", "arch": "amd64" },
            { "os": "linux", "arch": "386" },
            { "os": "windows", "arch": "amd64" },
            { "os": "windows", "arch": "386" },
          ]

    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publishclientrelease.outputs.upload_url }}
          asset_path: ./sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
          asset_name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
          asset_content_type: application/zip
