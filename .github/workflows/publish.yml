name: Publish

on:
  push:
    tags:
      - "v*"

jobs:
  lintweb:
    name: "Lint Web"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: "web/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('web/yarn.lock') }}
      - name: Install modules
        run: yarn --frozen-lockfile
      - name: Run ESLint
        run: yarn run eslint . --ext .ts,.tsx
      - name: Prettify code
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: -c ./web/src/**
          dry: true
  web:
    name: "Build Web"
    needs: lintweb
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: docker build web
  serverlint:
    name: "Lint Server"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: server
  server:
    name: "Build Server"
    needs: serverlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: docker build server
  clientlint:
    name: "Lint Client"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: client
  client:
    name: "Build Client"
    needs: clientlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v .
        working-directory: ./client
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    needs:
      - server
      - web
    name: "Run Tests With Cypress"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: |
            "web/node_modules"
            "~/.cache/Cypress"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('web/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --cwd ../web --frozen-lockfile
      - name: Build Server
        run: go build .
      - name: Setup env
        run: echo ${{ secrets.ENV_FILE }} > .env
      - name: Start Server
        run: ./server &
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: yarn start
          working-directory: web
          env: googleClientId=${{ secrets.GOOGLE_CLIENT_ID }},googleClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }},googleRefreshToken=${{ secrets.GOOGLE_REFRESH_TOKEN }}
          wait-on: "http://localhost:3000, http://localhost:5000/api/ping"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: ./web/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: ./web/cypress/videos
  publishweb:
    name: "Publish Web"
    needs:
      - web
      - server
      - client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/lavalleeale/sshca-web:latest
  publishserver:
    name: "Publish Server"
    needs:
      - web
      - server
      - client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/lavalleeale/sshca-server:latest
  publishclientartifacts:
    needs:
      - web
      - server
      - client
    name: Publish Client Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [
            { "os": "darwin", "arch": "amd64" },
            { "os": "darwin", "arch": "arm64" },
            { "os": "linux", "arch": "amd64" },
            { "os": "linux", "arch": "386" },
            { "os": "windows", "arch": "amd64" },
            { "os": "windows", "arch": "386" },
          ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"

      - name: Create Artifact
        run: |
          cd client
          GOOS=${{ matrix.target.os }} GOARCH=${{ matrix.target.arch }} go build -o sshca_client
          zip -j -r sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip sshca_client
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}
          path: ./client/sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
  # Create the release for the tag
  publishclientrelease:
    runs-on: ubuntu-latest
    name: Publish Client Release
    needs: publishclientartifacts
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  # Add all the builds as assets to the release
  publishclientartifactsrelease:
    runs-on: ubuntu-latest
    name: Add Client Artifacts to Release
    needs: [publishclientartifacts, publishclientrelease]
    strategy:
      matrix:
        target:
          [
            { "os": "darwin", "arch": "amd64" },
            { "os": "darwin", "arch": "arm64" },
            { "os": "linux", "arch": "amd64" },
            { "os": "linux", "arch": "386" },
            { "os": "windows", "arch": "amd64" },
            { "os": "windows", "arch": "386" },
          ]

    steps:
      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publishclientrelease.outputs.upload_url }}
          asset_path: ./sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
          asset_name: sshca_client_${{ matrix.target.os }}_${{ matrix.target.arch }}.zip
          asset_content_type: application/zip
