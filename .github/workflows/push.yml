name: Build

on:
  push:
  pull_request:

jobs:
  lintweb:
    name: "Lint Web"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - name: Prettify code
        run: npx prettier --check ./src/**
  web:
    name: "Build Web"
    needs: lintweb
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: yarn --cwd .. --immutable
      - name: Build Web
        env:
          NODE_ENV: development
        run: yarn build
  serverlint:
    name: "Lint Server"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - name: Prettify code
        run: npx prettier --check ./src/**
  server:
    name: "Build Server"
    needs: serverlint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: yarn --cwd .. --immutable
      - name: Build Server
        env:
          NODE_ENV: production
        run: yarn build
  clientlint:
    name: "Lint Client"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: sshca-client
  client:
    name: "Build Client"
    needs: clientlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v .
        working-directory: ./sshca-client
      - uses: actions/upload-artifact@v2
        with:
          name: client
          path: ./sshca-client/sshca-client
  hostlint:
    name: "Lint Host"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: sshca-host
  host:
    name: "Build Host"
    needs: hostlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v .
        working-directory: ./sshca-host
      - uses: actions/upload-artifact@v2
        with:
          name: client
          path: ./sshca-host/sshca-host
  tests:
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: development
          POSTGRES_USER: development
          POSTGRES_DB: development
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2]
    defaults:
      run:
        working-directory: ./server
    needs:
      - server
      - web
    name: "Run Tests With Cypress"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Env
        run: |
          echo "DATABASE_URL=\"postgresql://development:development@localhost:5432/development\"" > .env
          echo "JWT_PRIVATE=\"-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\"" >> .env
          echo "JWT_PUBLIC=\"-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtLXXxQhjdVvvbDumN5zw\nMdygYe8KmLGXldW4wt4lAMZtAP7ICfnKfWIujXE8sbzBVoGiRlgCQrXBzlqfjtMF\n7pK6IomsZ4qTN2BgS5oMiKX3kjKB9q+YOpmFUJ3bqE3zL+SkE230gkLq8Pnt0i2+\n8cdTqG3BL/OflLg0GSSdfURbyx/inzfvkL8Z313Skh++z4dzFsc3mjfCs5sI/V6z\nTuZqyE00gGw9RnS0U+2Ez4LzjUjFmxF2hhzSMkDmRXcLg0i3IwSfH+QgxV64xABv\n19bGJCWHdCKjvqN7Xgn3QmJv4gprb1WV3lgqx3H/r/J9uaTQwmJXWjhafphG7QWc\n2XbWFYWwdsZcAr+8SSsVb01Z44RCd0QYHGHWR42PXC47b9oG+G+xAN15Fiq9r33T\nusK6qX0tgdkIdO/ErYENFAKGqMilRHfCf1zOHE3jT2+hqv6J6H+rz4Bt/Cb/eFKy\nXSvC9X/6QX2oKHuLa8Y7xI9MCnB/ycvFjqhpd9f/kNFd4YXfsDzconGKST/2zCxH\nlOws2pGSgEemOycAnFVLIUd47cgFlMo4gawRu5+tDmCF2561WZ6eDCDrEPNetVXR\ne8rEBvWug2iZg7AE7CgAjLwSF3blJ9ktPzVV8rOYNLmf9EDMR9/GU/OurOC01PrX\nyimD24kScW6m3iYXBlNXNIcCAwEAAQ==\n-----END PUBLIC KEY-----\"" >> .env
          echo "SSH_KEY=\"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAIEApAidP6scNZJZqD2bS4AgJOYiVO/f90tGnz72wFeVUSABHUV/u8II\nju53rj2evLAqY4tgihkN/es0rk5OocWQ/1ShW/IBEtQzJ6zF71JYfqG94G3TLbV8FjJ+Nv\nZznrwBOGcVdMS8uQw0RUx3YnQVUPFdjb54bR2kqzsYKs/cF/kAAAIYHVf3hh1X94YAAAAH\nc3NoLXJzYQAAAIEApAidP6scNZJZqD2bS4AgJOYiVO/f90tGnz72wFeVUSABHUV/u8IIju\n53rj2evLAqY4tgihkN/es0rk5OocWQ/1ShW/IBEtQzJ6zF71JYfqG94G3TLbV8FjJ+NvZz\nnrwBOGcVdMS8uQw0RUx3YnQVUPFdjb54bR2kqzsYKs/cF/kAAAADAQABAAAAgEJ1GwCIms\n05lgmLrDdSmbNZad9vsBXI8bvjDqWu1lgf11O8rJutaTo/c02suXtJBGOAPIS20exmNtnH\n8COqn6us2Tqasx+I1D5VEQ1eGLAo64jo1hJVoOd5UR6DSG+sNmys88C5EJ3TItmOkhQ6SI\nO306abTbKHPtm2EX7cduthAAAAQGcrRy5Poh5Tz54RviYojnDUDyr+nquNHGFFWySOJkrv\nxuk91yyOkc9kdJmzlhkrBzKHzUkpHk5wgVacX7+l+aAAAABBAM32i2NHqoNBBc71KHJfrv\nuLoREVVzIWcE+IbHed2eP2Zgtww7OCU/coAxGimGGxQgznMtzXK3Z7l8MrXufV4J8AAABB\nAMviWtEUUv1gNQ9DSz20pL+dNiQ2v/SEmxEUQnhJ+lQWnUJDS/p2Gv/oRSWpfdLdow8fSd\nho5OSfAErZY5EeSGcAAAAcYWxleEBBbGV4cy1NYWNCb29rLUFpci5sb2NhbAECAwQFBgc=\n-----END OPENSSH PRIVATE KEY-----\"" >> .env
          echo "DOMAIN=\"localhost\"" >> .env
      - name: Install Dependencies
        run: yarn --cwd .. --immutable
      - name: Build Server
        env:
          NODE_ENV: development
        run: |
          yarn run prisma generate
          yarn run prisma migrate deploy
          yarn build
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          parallel: true
          group: "Github Actions"
          install: false
          start: yarn run -T start
          working-directory: web
          wait-on: "http://localhost:4000/api/graphql?query=%7B__typename%7D"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
