name: Build

on:
  push:
  pull_request:

jobs:
  lintweb:
    name: "Lint Web"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: "web/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('web/yarn.lock') }}
      - name: Install modules
        run: yarn --frozen-lockfile
      - name: Run ESLint
        run: yarn run eslint . --ext .ts,.tsx
      - name: Prettify code
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: -c ./web/src/**
          dry: true
  web:
    name: "Build Web"
    needs: lintweb
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: docker build web
  serverlint:
    name: "Lint Server"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - name: Prettify code
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: -c ./server/src/**
          dry: true
  server:
    name: "Build Server"
    needs: serverlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: docker build server
  clientlint:
    name: "Lint Client"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: sshca-client
  client:
    name: "Build Client"
    needs: clientlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v .
        working-directory: ./sshca-client
      - uses: actions/upload-artifact@v2
        with:
          name: client
          path: ./sshca-client/sshca-client
  tests:
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3, 4]
    defaults:
      run:
        working-directory: ./server
    needs:
      - server
      - web
    name: "Run Tests With Cypress"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        name: Cache Node Modules
        with:
          path: |
            "web/node_modules"
            "~/.cache/Cypress"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('web/yarn.lock') }}
      - uses: actions/cache@v2
        name: Cache Server Node Modules
        with:
          path: "server/node_modules"
          key: ${{ runner.os }}-modules-v1-${{ hashFiles('server/yarn.lock') }}
      - name: Install Dependencies
        run: |
          yarn --cwd ../web --frozen-lockfile
          yarn --cwd ../server --frozen-lockfile
      - name: Build Server
        run: NODE_ENV=production yarn build
      - name: Setup env
        run: echo ${{ secrets.ENV_FILE }} | base64 -d > .env
      - name: Start Server
        run: yarn start &
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
          parallel: true
          group: "Github Actions"
          install: false
          start: yarn start
          working-directory: web
          env: googleClientId=${{ secrets.GOOGLE_CLIENT_ID }},googleClientSecret=${{ secrets.GOOGLE_CLIENT_SECRET }},googleRefreshToken=${{ secrets.GOOGLE_REFRESH_TOKEN }}
          wait-on: "http://localhost:3000, http://localhost:4000"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: ./web/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: ./web/cypress/videos
